zmds2 <- plot_ordination(ps2, ordu2, axes = 1:10)$data[, 1:2]
par(mfrow = c(1,2))
plot(zmds2, col = label_extreme2[1,],
main = paste("P0=", 10^-rand_f2_sub[index_extreme2[1],3],
"P_mds=", 10^-rand_f2_sub[index_extreme2[1],4]))
plot(zmds2, col = label_extreme2[2,],
main = paste("P0=", 10^-rand_f2_sub[index_extreme2[2],3],
"P_mds=", 10^-rand_f2_sub[index_extreme2[2],4]))
par(mfrow = c(1,2))
plot(zmds1, col = label_extreme1[1,],
main = paste("P0=", 10^-rand_f1_sub[index_extreme1[1],3],
"P_mds=", 10^-rand_f1_sub[index_extreme1[1],4]))
plot(zmds1, col = label_extreme1[2,],
main = paste("P0=", 10^-rand_f1_sub[index_extreme1[2],3],
"P_mds=", 10^-rand_f1_sub[index_extreme1[2],4]))
par(mfrow = c(1,2))
plot(zmds2, col = label_extreme2[1,],
main = paste("P0=", 10^-rand_f2_sub[index_extreme2[1],3],
"P_mds=", 10^-rand_f2_sub[index_extreme2[1],4]))
plot(zmds2, col = label_extreme2[2,],
main = paste("P0=", 10^-rand_f2_sub[index_extreme2[2],3],
"P_mds=", 10^-rand_f2_sub[index_extreme2[2],4]))
par(mfrow = c(1,2))
plot(zmds1, col = label_extreme1[1,],
main = paste("P0=", 10^-rand_f1_sub[index_extreme1[1],3],
"P_mds=", 10^-rand_f1_sub[index_extreme1[1],4]))
plot(zmds1, col = label_extreme1[2,],
main = paste("P0=", 10^-rand_f1_sub[index_extreme1[2],3],
"P_mds=", 10^-rand_f1_sub[index_extreme1[2],4]))
label_extreme1
data(label_extreme1)
label_extreme1.T
t(label_extreme1)
write.table(index_extreme1, file = "labels_site1.txt", sep = "\t", row.names = FALSE, col.names = NA)
write.table(t(index_extreme1), file = "labels_site1.txt", sep = "\t")
write.table(t(label_extreme1), file = "labels_site1.txt", sep = "\t")
write.table(t(label_extreme1), file = "labels_site1.txt", sep = "\t", row.names = FALSE)
write.table(t(label_extreme2), file = "labels_site2.txt", sep = "\t", row.names = FALSE)
library("phyloseq")
library("ggplot2")
library("ape")
library("vegan")
library(dplyr)
#### Load Data
ps = readRDS("community_phyloseq.Rds")
#### Distance matrix
site1 = subset_samples(ps, Site=="1") # subset
site2 = subset_samples(ps, Site=="2") # subset
dist1 = phyloseq::distance(site1, method = "unifrac", weighted = T)
dist2 = phyloseq::distance(site2, method = "unifrac", weighted = T)
distmat1 = distmat2 = matrix(0, nrow = 36, ncol = 36)
pnt = 0
for(i in 1:35){
len = 36-i
distmat1[(i+1):36, i] = dist1[(pnt+1):(pnt+len)]
distmat2[(i+1):36, i] = dist2[(pnt+1):(pnt+len)]
pnt = pnt+len
}
distmat1 = distmat1 + t(distmat1)
distmat2 = distmat2 + t(distmat2)
library("phyloseq")
library("ggplot2")
library("ape")
library("vegan")
# path = "/Users/hk/desktop/mit/doctoral/idps/2021-08" # write your current directory here
ps = readRDS("community_phyloseq.Rds")
ps_filter1 = subset_samples(ps, Site=="1") # subset each site ("1" or "2")
ordu1 = ordinate(ps_filter1, "PCoA", distance = "unifrac", weighted=TRUE);
zz1 <- plot_ordination(ps_filter1, ordu1, shape="Treatment", axes = 1:10)
zmds1 <- zz1$data[, 1:2]
ps_filter2 = subset_samples(ps, Site=="2") # subset each site ("1" or "2")
ordu2 = ordinate(ps_filter2, "PCoA", distance = "unifrac", weighted=TRUE);
zz2 <- plot_ordination(ps_filter2, ordu2, shape="Treatment", axes = 1:10)
zmds2 <- zz2$data[, 1:2]
# -----
# MDS + F terms
gd_cmds <- function(nit = 1000, eta = 1e-04, conv_crit = 5e-03, lambda = 0.05,
z0, D, S = 2, y){
# fixed step size (eta)
N = dim(D)[1]
a <- length(table(y))
z_cur <- z0 #matrix, N * S
Fz_cur <- pseudo_F(mat = z_cur, trt = y)$pseudoF
F0 <- pseudo_F(d = D, trt = y)$pseudoF
Finit <- Fz_cur
obj_total = mds_obj(D = D, z = z_cur) + lambda*abs(F0 - Fz_cur)
for(t in 1:nit){
obj_total_prev <- obj_total
print(paste('iteration', t,
'  total', sprintf(obj_total, fmt = '%#.3f'),
'  Fz', sprintf(Fz_cur, fmt = '%#.3f')))
for(i in 1:N){
d_f <- rep(0, S)
tmp11 <- tmp22 <- rep(0, S)
tmp12 <- tmp21 <- 0
for(j in 1:N){
if(j != i) {
d_f <- d_f + 2 * (1 - D[i,j]/sqrt(sum((z_cur[i,] - z_cur[j,])^2))) *
(z_cur[i,] - z_cur[j,])
}
tmp11 <- tmp11 + z_cur[i,] - z_cur[j,]
tmp22 <- tmp22 + as.numeric(ifelse(y[i] == y[j], z_cur[i,] - z_cur[j,], rep(0, S)))
for(i_ in 1:N){
tmp21 <- tmp21 + sum((z_cur[i_,] - z_cur[j,])^2)
tmp12 <- tmp12 + ifelse(y[i_] == y[j],
sum((z_cur[i_,] - z_cur[j,])^2), 0)
}
}
tmp3 <- tmp12^(-2)
d_g <- 4 * (N-a)/a * sign(Fz_cur - F0) * (tmp11 * tmp12 - tmp21 * tmp22) * tmp3
z_cur[i,] <- z_cur[i,] - eta * (d_f + lambda * d_g)
Fz_cur <- pseudo_F(mat = z_cur, trt = y)$pseudoF
}
obj_total = mds_obj(D = D, z = z_cur) + lambda*abs(F0 - Fz_cur)
if(abs(obj_total - obj_total_prev) < conv_crit * obj_total){
print("Converged")
break
}
}
obj0 = mds_obj(D = D, z = z0)
obj_up = mds_obj(D = D, z = z_cur)
return(list(z = z_cur, obj0 = obj0, obj_up = obj_up,
F0 = F0, Finit = Finit, Fup = Fz_cur))
}
par(mfrow = c(1,2))
plot(zmds2, col = label_extreme2[1,],
main = paste("P0=", 10^-rand_f2_sub[index_extreme2[1],3],
"P_mds=", 10^-rand_f2_sub[index_extreme2[1],4]))
plot(zmds2, col = label_extreme2[2,],
main = paste("P0=", 10^-rand_f2_sub[index_extreme2[2],3],
"P_mds=", 10^-rand_f2_sub[index_extreme2[2],4]))
y1 <- ifelse(site1@sam_data$Treatment == "Pt +", 1, 2)
rm(y1)
y2 <- label_extreme2[2,]
y2
tmp <- gd_cmds(nit = 20, D = as.matrix(dist2), z0 = zmds2, y=y2, lambda = 0.05, eta = 3e-04)
# variables dependency on get_dist.R, data.R
source("permanova_with_config.R")
# MDS objective
mds_obj <- function(D, z){
N = dim(D)[1]
S = dim(z)[2]
z_dist = matrix(0, nrow = N, ncol = N)
for(i in 1:N){
for(j in 1:N){
z_dist[i,j] <- sqrt(sum((z[i,] - z[j,])^2))
}
}
return(sum((D - z_dist)^2)/2)
}
tmp <- gd_cmds(nit = 20, D = as.matrix(dist2), z0 = zmds2, y=y2, lambda = 0.05, eta = 3e-04)
tmp
plot(tmp$z, col = y2)
par(mfrow = c(1,2))
plot(zmds2, col = label_extreme2[2,],
main = paste("P0=", 10^-rand_f2_sub[index_extreme2[2],3],
"P_mds=", 10^-rand_f2_sub[index_extreme2[2],4]))
plot(tmp$z, col = y2)
pseudo_F(tmp$z, y2)
z_out <- tmp$z
z_out['label'] <- y2
z_out
ado = adonis(z_out ~ label)
ado = adonis(z_out ~ label, data=z_out)
print(ado)
tmp
write.csv(z_out, 'zmds_site2.csv')
pseudo_F(mat = zmds2, trt = y2)$pseudoF
10^-rand_f2_sub[index_extreme2[2],3]
10^-rand_f2_sub[index_extreme2[2],4])
10^-rand_f2_sub[index_extreme2[2],4]
10^-rand_f2_sub[index_extreme2[2],1:2]
10^-rand_f2_sub[index_extreme2[2],1:4]
10^-rand_f2_sub[index_extreme2[1],1:4]
tmp
rand_f2_sub
rand_f2_sub[index_extreme2[2],1:4]
10^-2.39794
tmp
pseudo_F(mat = as.matrix(dist2), trt = y2)$pseudoF
pseudo_F(mat = distmat2, trt = y2)$pseudoF
pseudo_F(d = as.matrix(dist2), trt = y2)$pseudoF
dist2
# function
get_random_f_stats <- function(distmat, ordu, n_iter = 1000){
# initialize
random_f = matrix(0, nrow=n_iter, ncol=4)
colnames(random_f) <- c('F_original', 'F_2D', 'p_original', 'p_2D')
random_labels <- matrix(0, nrow=n_iter, ncol=36)
# randomly assign labels by iteration
print('processing iterations..')
for (iter in 1:n_iter){
random_index <- sample(1:36, 18, replace=F)
y <- rep(1,36)
y[random_index] = 2  # crate random labels for ps dataset
random_labels[iter,] <- y
random_f[iter,1] = pseudo_F(d = distmat, trt = y)$pseudoF
random_f[iter,2] = pseudo_F(d = ordu$vectors[,1:2], trt = y)$pseudoF
}
# compute and fill in p values
for (c in 1:2){
f_sorted = sort(random_f[,c], decreasing = TRUE)
for (iter in 1:n_iter){
random_f[iter, c+2] = which(random_f[iter, c] == f_sorted)
}
}
random_f[,3:4] <- -log10(random_f[,3:4]/n_iter)
return(list(f=random_f, labels=random_labels))
}
f_stats1 <- get_random_f_stats(distmat=distmat1, ordu=ordu1, n_iter=2500)
# function
get_random_f_stats <- function(distmat, ordu, n_iter = 1000){
# initialize
random_f = matrix(0, nrow=n_iter, ncol=4)
colnames(random_f) <- c('F_original', 'F_2D', 'p_original', 'p_2D')
random_labels <- matrix(0, nrow=n_iter, ncol=36)
# randomly assign labels by iteration
print('processing iterations..')
for (iter in 1:n_iter){
random_index <- sample(1:36, 18, replace=F)
y <- rep(1,36)
y[random_index] = 2  # crate random labels for ps dataset
random_labels[iter,] <- y
random_f[iter,1] = pseudo_F(d = distmat, trt = y)$pseudoF
random_f[iter,2] = pseudo_F(mat = ordu$vectors[,1:2], trt = y)$pseudoF
}
# compute and fill in p values
for (c in 1:2){
f_sorted = sort(random_f[,c], decreasing = TRUE)
for (iter in 1:n_iter){
random_f[iter, c+2] = which(random_f[iter, c] == f_sorted)
}
}
random_f[,3:4] <- -log10(random_f[,3:4]/n_iter)
return(list(f=random_f, labels=random_labels))
}
f_stats1 <- get_random_f_stats(distmat=distmat1, ordu=ordu1, n_iter=2500)
f_stats2 <- get_random_f_stats(distmat=distmat2, ordu=ordu2, n_iter=2500)
random_f1 <- f_stats1$f
random_f2 <- f_stats2$f
labels1 <- f_stats1$labels
labels2 <- f_stats2$labels
par(mfrow = c(1,2))
plot(random_f1[,1:2], main = "Site 1", 'xlab' = 'pseudo F, original', 'ylab'='pseudo F, 2D')
plot(random_f2[,1:2], main = "Site 2", 'xlab' = 'pseudo F, original', 'ylab'='pseudo F, 2D')
par(mfrow = c(1,2))
plot(random_f1[,3:4], main = "Site 1", 'xlab' = '-log P, original', 'ylab'='-log P, 2D')
plot(random_f2[,3:4], main = "Site 2", 'xlab' = '-log P, original', 'ylab'='-log P, 2D')
# function
pick_extreme <- function(random_f, labels){
ind_significant <- (random_f[,3]>1)|(random_f[,4]>1)
random_f_filtered <- random_f[ind_significant,]
p_ratio <- random_f_filtered[,3]/random_f_filtered[,4]
index_extremes <- which(p_ratio==max(p_ratio) | p_ratio==min(p_ratio))
labels_extremes <- labels[ind_significant,][index_extremes,]
return(list(f=random_f_filtered, index=index_extremes, label=labels_extremes))
}
extremes1_list <- pick_extreme(random_f1, labels1)
extremes2_list <- pick_extreme(random_f2, labels2)
rand_f1_sub <- extremes1_list$f
rand_f2_sub <- extremes2_list$f
index_extreme1 <- extremes1_list$index
index_extreme2 <- extremes2_list$index
label_extreme1 <- extremes1_list$label
label_extreme2 <- extremes2_list$label
zmds1 <- plot_ordination(ps1, ordu1, axes = 1:10)$data[, 1:2]
zmds2 <- plot_ordination(ps2, ordu2, axes = 1:10)$data[, 1:2]
par(mfrow = c(1,2))
plot(zmds2, col = label_extreme2[1,],
main = paste("P0=", 10^-rand_f2_sub[index_extreme2[1],3],
"P_mds=", 10^-rand_f2_sub[index_extreme2[1],4]))
plot(zmds2, col = label_extreme2[2,],
main = paste("P0=", 10^-rand_f2_sub[index_extreme2[2],3],
"P_mds=", 10^-rand_f2_sub[index_extreme2[2],4]))
par(mfrow = c(1,2))
plot(zmds1, col = label_extreme1[1,],
main = paste("P0=", 10^-rand_f1_sub[index_extreme1[1],3],
"P_mds=", 10^-rand_f1_sub[index_extreme1[1],4]))
plot(zmds1, col = label_extreme1[2,],
main = paste("P0=", 10^-rand_f1_sub[index_extreme1[2],3],
"P_mds=", 10^-rand_f1_sub[index_extreme1[2],4]))
log10(0.05)
# function
pick_extreme <- function(random_f, labels){
ind_significant <- (random_f[,3]>1.3)|(random_f[,4]>1.3)
random_f_filtered <- random_f[ind_significant,]
p_ratio <- random_f_filtered[,3]/random_f_filtered[,4]
index_extremes <- which(p_ratio==max(p_ratio) | p_ratio==min(p_ratio))
labels_extremes <- labels[ind_significant,][index_extremes,]
return(list(f=random_f_filtered, index=index_extremes, label=labels_extremes))
}
extremes1_list <- pick_extreme(random_f1, labels1)
extremes2_list <- pick_extreme(random_f2, labels2)
rand_f1_sub <- extremes1_list$f
rand_f2_sub <- extremes2_list$f
index_extreme1 <- extremes1_list$index
index_extreme2 <- extremes2_list$index
label_extreme1 <- extremes1_list$label
label_extreme2 <- extremes2_list$label
par(mfrow = c(1,2))
plot(zmds2, col = label_extreme2[1,],
main = paste("P0=", 10^-rand_f2_sub[index_extreme2[1],3],
"P_mds=", 10^-rand_f2_sub[index_extreme2[1],4]))
plot(zmds2, col = label_extreme2[2,],
main = paste("P0=", 10^-rand_f2_sub[index_extreme2[2],3],
"P_mds=", 10^-rand_f2_sub[index_extreme2[2],4]))
label_extreme2[1,]
write.csv(t(label_extreme2), 'result/labels_site2.txt', row.names = FALSE)
write.csv(t(label_extreme1), 'result/labels_site1.txt', row.names = FALSE)
y2 <- label_extreme2[1,]
rand_f2_sub[index_extreme2[1],3]
rand_f2_sub[index_extreme2[1],]
tmp <- gd_cmds(nit = 20, D = as.matrix(dist2), z0 = zmds2, y=y2, lambda = 0.05, eta = 3e-04)
# -----
# MDS + F terms
gd_cmds <- function(nit = 1000, eta = 1e-04, conv_crit = 5e-03, lambda = 0.05,
z0, D, S = 2, y){
# fixed step size (eta)
N = dim(D)[1]
a <- length(table(y))
z_cur <- z0 #matrix, N * S
Fz_cur <- pseudo_F(mat = z_cur, trt = y)$pseudoF
F0 <- pseudo_F(d = D, trt = y)$pseudoF
Finit <- Fz_cur
obj_total = mds_obj(D = D, z = z_cur) + lambda*abs(F0 - Fz_cur)
for(t in 1:nit){
obj_total_prev <- obj_total
print(paste('iteration', t,
'  total', sprintf(obj_total, fmt = '%#.3f'),
'  Fz', sprintf(Fz_cur, fmt = '%#.3f'),
'  F0', sprintf(f0, fmt = '%#.3f'),
))
for(i in 1:N){
d_f <- rep(0, S)
tmp11 <- tmp22 <- rep(0, S)
tmp12 <- tmp21 <- 0
for(j in 1:N){
if(j != i) {
d_f <- d_f + 2 * (1 - D[i,j]/sqrt(sum((z_cur[i,] - z_cur[j,])^2))) *
(z_cur[i,] - z_cur[j,])
}
tmp11 <- tmp11 + z_cur[i,] - z_cur[j,]
tmp22 <- tmp22 + as.numeric(ifelse(y[i] == y[j], z_cur[i,] - z_cur[j,], rep(0, S)))
for(i_ in 1:N){
tmp21 <- tmp21 + sum((z_cur[i_,] - z_cur[j,])^2)
tmp12 <- tmp12 + ifelse(y[i_] == y[j],
sum((z_cur[i_,] - z_cur[j,])^2), 0)
}
}
tmp3 <- tmp12^(-2)
d_g <- 4 * (N-a)/a * sign(Fz_cur - F0) * (tmp11 * tmp12 - tmp21 * tmp22) * tmp3
z_cur[i,] <- z_cur[i,] - eta * (d_f + lambda * d_g)
Fz_cur <- pseudo_F(mat = z_cur, trt = y)$pseudoF
}
obj_total = mds_obj(D = D, z = z_cur) + lambda*abs(F0 - Fz_cur)
if(abs(obj_total - obj_total_prev) < conv_crit * obj_total){
print("Converged")
break
}
}
obj0 = mds_obj(D = D, z = z0)
obj_up = mds_obj(D = D, z = z_cur)
return(list(z = z_cur, obj0 = obj0, obj_up = obj_up,
F0 = F0, Finit = Finit, Fup = Fz_cur))
}
tmp <- gd_cmds(nit = 20, D = as.matrix(dist2), z0 = zmds2, y=y2, lambda = 0.05, eta = 3e-04)
# -----
# MDS + F terms
gd_cmds <- function(nit = 1000, eta = 1e-04, conv_crit = 5e-03, lambda = 0.05,
z0, D, S = 2, y){
# fixed step size (eta)
N = dim(D)[1]
a <- length(table(y))
z_cur <- z0 #matrix, N * S
Fz_cur <- pseudo_F(mat = z_cur, trt = y)$pseudoF
F0 <- pseudo_F(d = D, trt = y)$pseudoF
Finit <- Fz_cur
obj_total = mds_obj(D = D, z = z_cur) + lambda*abs(F0 - Fz_cur)
for(t in 1:nit){
obj_total_prev <- obj_total
print(paste('iteration', t,
'  total', sprintf(obj_total, fmt = '%#.3f'),
'  Fz', sprintf(Fz_cur, fmt = '%#.3f'),
'  F0', sprintf(F0, fmt = '%#.3f'),
))
for(i in 1:N){
d_f <- rep(0, S)
tmp11 <- tmp22 <- rep(0, S)
tmp12 <- tmp21 <- 0
for(j in 1:N){
if(j != i) {
d_f <- d_f + 2 * (1 - D[i,j]/sqrt(sum((z_cur[i,] - z_cur[j,])^2))) *
(z_cur[i,] - z_cur[j,])
}
tmp11 <- tmp11 + z_cur[i,] - z_cur[j,]
tmp22 <- tmp22 + as.numeric(ifelse(y[i] == y[j], z_cur[i,] - z_cur[j,], rep(0, S)))
for(i_ in 1:N){
tmp21 <- tmp21 + sum((z_cur[i_,] - z_cur[j,])^2)
tmp12 <- tmp12 + ifelse(y[i_] == y[j],
sum((z_cur[i_,] - z_cur[j,])^2), 0)
}
}
tmp3 <- tmp12^(-2)
d_g <- 4 * (N-a)/a * sign(Fz_cur - F0) * (tmp11 * tmp12 - tmp21 * tmp22) * tmp3
z_cur[i,] <- z_cur[i,] - eta * (d_f + lambda * d_g)
Fz_cur <- pseudo_F(mat = z_cur, trt = y)$pseudoF
}
obj_total = mds_obj(D = D, z = z_cur) + lambda*abs(F0 - Fz_cur)
if(abs(obj_total - obj_total_prev) < conv_crit * obj_total){
print("Converged")
break
}
}
obj0 = mds_obj(D = D, z = z0)
obj_up = mds_obj(D = D, z = z_cur)
return(list(z = z_cur, obj0 = obj0, obj_up = obj_up,
F0 = F0, Finit = Finit, Fup = Fz_cur))
}
tmp <- gd_cmds(nit = 20, D = as.matrix(dist2), z0 = zmds2, y=y2, lambda = 0.05, eta = 3e-04)
# -----
# MDS + F terms
gd_cmds <- function(nit = 1000, eta = 1e-04, conv_crit = 5e-03, lambda = 0.05,
z0, D, S = 2, y){
# fixed step size (eta)
N = dim(D)[1]
a <- length(table(y))
z_cur <- z0 #matrix, N * S
Fz_cur <- pseudo_F(mat = z_cur, trt = y)$pseudoF
F0 <- pseudo_F(d = D, trt = y)$pseudoF
Finit <- Fz_cur
obj_total = mds_obj(D = D, z = z_cur) + lambda*abs(F0 - Fz_cur)
for(t in 1:nit){
obj_total_prev <- obj_total
print(paste('iteration', t,
'  total', sprintf(obj_total, fmt = '%#.3f'),
'  Fz', sprintf(Fz_cur, fmt = '%#.3f'),
'  F0', sprintf(F0, fmt = '%#.3f')
))
for(i in 1:N){
d_f <- rep(0, S)
tmp11 <- tmp22 <- rep(0, S)
tmp12 <- tmp21 <- 0
for(j in 1:N){
if(j != i) {
d_f <- d_f + 2 * (1 - D[i,j]/sqrt(sum((z_cur[i,] - z_cur[j,])^2))) *
(z_cur[i,] - z_cur[j,])
}
tmp11 <- tmp11 + z_cur[i,] - z_cur[j,]
tmp22 <- tmp22 + as.numeric(ifelse(y[i] == y[j], z_cur[i,] - z_cur[j,], rep(0, S)))
for(i_ in 1:N){
tmp21 <- tmp21 + sum((z_cur[i_,] - z_cur[j,])^2)
tmp12 <- tmp12 + ifelse(y[i_] == y[j],
sum((z_cur[i_,] - z_cur[j,])^2), 0)
}
}
tmp3 <- tmp12^(-2)
d_g <- 4 * (N-a)/a * sign(Fz_cur - F0) * (tmp11 * tmp12 - tmp21 * tmp22) * tmp3
z_cur[i,] <- z_cur[i,] - eta * (d_f + lambda * d_g)
Fz_cur <- pseudo_F(mat = z_cur, trt = y)$pseudoF
}
obj_total = mds_obj(D = D, z = z_cur) + lambda*abs(F0 - Fz_cur)
if(abs(obj_total - obj_total_prev) < conv_crit * obj_total){
print("Converged")
break
}
}
obj0 = mds_obj(D = D, z = z0)
obj_up = mds_obj(D = D, z = z_cur)
return(list(z = z_cur, obj0 = obj0, obj_up = obj_up,
F0 = F0, Finit = Finit, Fup = Fz_cur))
}
tmp <- gd_cmds(nit = 20, D = as.matrix(dist2), z0 = zmds2, y=y2, lambda = 0.05, eta = 3e-04)
par(mfrow = c(1,2))
plot(zmds2, col = label_extreme2[1,],
main = paste("P0=", 10^-rand_f2_sub[index_extreme2[1],3],
"P_mds=", 10^-rand_f2_sub[index_extreme2[1],4]))
tmp
plot(tmp$z, col = y2)
View(ps2)
z_out <- tmp$z
write.csv(z_out,'result/zmds_site2_l_5e-2.csv', row.names = FALSE)
z_out['label'] <- y2
write.csv(z_out,'result/zmds_site2_l_5e-2.csv', row.names = FALSE)
write.csv(z_out,'result/zmds_site2_l_5e-2_V2.csv', row.names = TRUE)
tmp2 <- gd_cmds(nit = 20, D = as.matrix(dist2), z0 = zmds2, y=y2, lambda = 0.2, eta = 3e-04)
plot(tmp$z, col = y2)
par(mfrow = c(1,2))
plot(zmds2, col = label_extreme2[1,],
main = paste("P0=", 10^-rand_f2_sub[index_extreme2[1],3],
"P_mds=", 10^-rand_f2_sub[index_extreme2[1],4]))
plot(tmp$z, col = y2)
par(mfrow = c(1,2))
plot(zmds2, col = label_extreme2[1,],
main = paste("P0=", 10^-rand_f2_sub[index_extreme2[1],3],
"P_mds=", 10^-rand_f2_sub[index_extreme2[1],4]))
plot(tmp2$z, col = y2)
z_out <- tmp2$z
plot(tmp$z, col = y2)
z_out['label'] <- y2
write.csv(z_out,'result/zmds_site2_l_2e-1.csv', row.names = TRUE)
tmp2
tmp3 <- gd_cmds(nit = 20, D = as.matrix(dist2), z0 = zmds2, y=y2, lambda = 1, eta = 3e-04)
plot(tmp3$z, col = y2)
tmp3_1 <- gd_cmds(nit = 5, D = as.matrix(dist2), z0 = zmds2, y=y2, lambda = 1, eta = 3e-04)
plot(tmp3_1$z, col = y2)
plot(tmp2$z, col = y2)
z_out <- tmp3$z
z_out['label']=y2
write.csv(z_out,'result/zmds_site2_l_1e0_epoch_20.csv', row.names = TRUE)
z_out <- tmp3_1$z
z_out['label']=y2
write.csv(z_out,'result/zmds_site2_l_1e0_epoch_5.csv', row.names = TRUE)
