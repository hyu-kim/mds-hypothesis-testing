help(cmdscale)
view(cmdscale)
View(cmdscale)
0.0644/1.5
# variables dependency on get_dist.R, data.R, smds.R
source("permanova_with_config.R")
setwd("~/Documents/GitHub/mds-hypothesis-testing/data")
# variables dependency on get_dist.R, data.R, smds.R
source("permanova_with_config.R")
# MDS objective
mds_obj <- function(D, z){
N = dim(D)[1]
S = dim(z)[2]
z_dist = matrix(0, nrow = N, ncol = N)
for(i in 1:N){
for(j in 1:N){
z_dist[i,j] <- sqrt(sum((z[i,] - z[j,])^2))
}
}
return(sum((D - z_dist)^2)/2)
}
# MDS term
gd_mds <- function(nit = 1000, eta = 1e-04, conv_lim = 1e-05,
D, S = 2, z0){
# fixed step size (eta)
N = dim(D)[1]
z_cur <- z0 #matrix, N * S
for(t in 1:nit){
print(paste('iteration',t))
for(i in 1:N){
# f
d_f <- rep(0, S)
for(j in setdiff(1:N, i)){
d_f <- d_f + 2 * (1 - D[i,j]/sqrt(sum((z_cur[i,] - z_cur[j,])^2))) *
(z_cur[i,] - z_cur[j,])
}
z_cur[i,] <- z_cur[i,] - eta * d_f
}
z_up <- z_cur
# if(sqrt(sum((z_up - z_cur)^2)) < conv_lim){
#   print("Converged")
#   break
#### convergence at every i?
# }
}
obj0 = mds_obj(D = D, z = z0)
obj_up = mds_obj(D = D, z = z_up)
return(list(z = z_up, obj0 = obj0, obj_up = obj_up))
}
# F statistic term, L1 norm
gd_class <- function(nit = 1000, eta = 1e-04, z0, conv_lim = 1e-05,
D, S = 2, y){
# fixed step size (eta)
N = nrow(z0)
a <- length(table(y))
z_cur <- z0 #matrix, N * S
Fz_cur <- pseudo_F(mat = z_cur, trt = y)$pseudoF
F0 <- pseudo_F(d = D, trt = y)$pseudoF
Finit <- Fz_cur
for(t in 1:nit){
for(i in 1:N){
# f
# d_g <- rep(0, S)
tmp11 <- tmp22 <- rep(0, S)
tmp12 <- tmp21 <- 0
for(j in 1:N){
tmp11 <- tmp11 + z_cur[i,] - z_cur[j,]
tmp22 <- tmp22 + ifelse(y[i] == y[j], z_cur[i,] - z_cur[j,], 0)
for(i_ in 1:N){
tmp21 <- tmp21 + sum((z_cur[i_,] - z_cur[j,])^2)
tmp12 <- tmp12 + ifelse(y[i_] == y[j],
sum((z_cur[i_,] - z_cur[j,])^2), 0)
}
}
d_g <- 4 * (N-a)/a * sign(Fz_cur - F0) * (tmp11 * tmp12 - tmp21 * tmp22)
z_cur[i,] <- z_cur[i,] - eta * d_g
Fz_cur <- pseudo_F(mat = z_cur, trt = y)$pseudoF
}
z_up <- z_cur
# if(sqrt(sum((z_up - z_cur)^2)) < conv_lim){
#   print("Converged")
#   break
#### convergence at every i?
# }
}
return(list(z = z_up, obj0 = abs(F0 - Finit), obj_up = abs(F0 - Fz_cur),
F0 = F0, Finit = Finit, Fup = Fz_cur))
}
# MDS + F terms
gd_cmds <- function(nit = 1000, eta = 1e-04, conv_lim = 1e-05, lambda = 500,
z0, D, S = 2, y){
# fixed step size (eta)
N = dim(D)[1]
a <- length(table(y))
z_cur <- z0 #matrix, N * S
Fz_cur <- pseudo_F(mat = z_cur, trt = y)$pseudoF
F0 <- pseudo_F(d = D, trt = y)$pseudoF
Finit <- Fz_cur
for(t in 1:nit){
obj_mds = mds_obj(D = D, z = z_cur)
obj_total = obj_mds + lambda*abs(F0 - Fz_cur)
print(paste('iteration', t, 'total', obj_total, 'Fz', Fz_cur))
for(i in 1:N){
d_f <- rep(0, S)
tmp11 <- tmp22 <- rep(0, S)
tmp12 <- tmp21 <- 0
for(j in 1:N){
if(j != i) {
d_f <- d_f + 2 * (1 - D[i,j]/sqrt(sum((z_cur[i,] - z_cur[j,])^2))) *
(z_cur[i,] - z_cur[j,])
}
tmp11 <- tmp11 + z_cur[i,] - z_cur[j,]
tmp22 <- tmp22 + as.numeric(ifelse(y[i] == y[j], z_cur[i,] - z_cur[j,], rep(0, S)))
for(i_ in 1:N){
tmp21 <- tmp21 + sum((z_cur[i_,] - z_cur[j,])^2)
tmp12 <- tmp12 + ifelse(y[i_] == y[j],
sum((z_cur[i_,] - z_cur[j,])^2), 0)
}
}
tmp3 <- tmp12^(-2)
d_g <- 4 * (N-a)/a * sign(Fz_cur - F0) * (tmp11 * tmp12 - tmp21 * tmp22) * tmp3
z_cur[i,] <- z_cur[i,] - eta * (d_f + lambda * d_g)
Fz_cur <- pseudo_F(mat = z_cur, trt = y)$pseudoF
}
# if(sqrt(sum((z_up - z_cur)^2)) < conv_lim){
#   print("Converged")
#   break
# ### convergence at every i?
# }
}
obj0 = mds_obj(D = D, z = z0)
obj_up = mds_obj(D = D, z = z_cur)
return(list(z = z_cur, obj0 = obj0, obj_up = obj_up,
F0 = F0, Finit = Finit, Fup = Fz_cur))
}
y1 <- ifelse(site1@sam_data$Treatment == "Pt +", 1, 2)
y2 <- ifelse(site2@sam_data$Treatment == "Pt +", 1, 2)
tmp3 <- gd_cmds(nit = 30, D = as.matrix(dist1), z0 = zmds1, y=y1, lambda = 0.05, eta = 5e-04)
library("phyloseq")
library("ggplot2")
library("ape")
library("vegan")
# path = "/Users/hk/desktop/mit/doctoral/idps/2021-08" # write your current directory here
ps = readRDS("community_phyloseq.Rds")
ps_filter1 = subset_samples(ps, Site=="1") # subset each site ("1" or "2")
ordu1 = ordinate(ps_filter1, "PCoA", distance = "unifrac", weighted=TRUE);
zz1 <- plot_ordination(ps_filter1, ordu1, shape="Treatment", axes = 1:10)
zmds1 <- zz1$data[, 1:2]
ps_filter2 = subset_samples(ps, Site=="2") # subset each site ("1" or "2")
ordu2 = ordinate(ps_filter2, "PCoA", distance = "unifrac", weighted=TRUE);
zz2 <- plot_ordination(ps_filter2, ordu2, shape="Treatment", axes = 1:10)
zmds2 <- zz2$data[, 1:2]
library("phyloseq")
library("ggplot2")
library("ape")
library("vegan")
library(dplyr)
#### Load Data
ps = readRDS("community_phyloseq.Rds")
#### Distance matrix
site1 = subset_samples(ps, Site=="1") # subset
site2 = subset_samples(ps, Site=="2") # subset
dist1 = phyloseq::distance(site1, method = "unifrac", weighted = T)
dist2 = phyloseq::distance(site2, method = "unifrac", weighted = T)
distmat1 = distmat2 = matrix(0, nrow = 36, ncol = 36)
pnt = 0
for(i in 1:35){
len = 36-i
distmat1[(i+1):36, i] = dist1[(pnt+1):(pnt+len)]
distmat2[(i+1):36, i] = dist2[(pnt+1):(pnt+len)]
pnt = pnt+len
}
distmat1 = distmat1 + t(distmat1)
distmat2 = distmat2 + t(distmat2)
tmp3 <- gd_cmds(nit = 30, D = as.matrix(dist1), z0 = zmds1, y=y1, lambda = 0.05, eta = 5e-04)
# MDS + F terms
gd_cmds <- function(nit = 1000, eta = 1e-04, conv_lim = 1e-05, lambda = 500,
z0, D, S = 2, y){
# fixed step size (eta)
N = dim(D)[1]
a <- length(table(y))
z_cur <- z0 #matrix, N * S
Fz_cur <- pseudo_F(mat = z_cur, trt = y)$pseudoF
F0 <- pseudo_F(d = D, trt = y)$pseudoF
Finit <- Fz_cur
for(t in 1:nit){
obj_mds = mds_obj(D = D, z = z_cur)
obj_total = obj_mds + lambda*abs(F0 - Fz_cur)
print(paste('iteration', t,
'  total', sprintf(obj_total, fmt = '%#.3f'),
'  Fz', sprintf(Fz_cur, fmt = '%#.3f')))
for(i in 1:N){
d_f <- rep(0, S)
tmp11 <- tmp22 <- rep(0, S)
tmp12 <- tmp21 <- 0
for(j in 1:N){
if(j != i) {
d_f <- d_f + 2 * (1 - D[i,j]/sqrt(sum((z_cur[i,] - z_cur[j,])^2))) *
(z_cur[i,] - z_cur[j,])
}
tmp11 <- tmp11 + z_cur[i,] - z_cur[j,]
tmp22 <- tmp22 + as.numeric(ifelse(y[i] == y[j], z_cur[i,] - z_cur[j,], rep(0, S)))
for(i_ in 1:N){
tmp21 <- tmp21 + sum((z_cur[i_,] - z_cur[j,])^2)
tmp12 <- tmp12 + ifelse(y[i_] == y[j],
sum((z_cur[i_,] - z_cur[j,])^2), 0)
}
}
tmp3 <- tmp12^(-2)
d_g <- 4 * (N-a)/a * sign(Fz_cur - F0) * (tmp11 * tmp12 - tmp21 * tmp22) * tmp3
z_cur[i,] <- z_cur[i,] - eta * (d_f + lambda * d_g)
Fz_cur <- pseudo_F(mat = z_cur, trt = y)$pseudoF
}
# if(sqrt(sum((z_up - z_cur)^2)) < conv_lim){
#   print("Converged")
#   break
# ### convergence at every i?
# }
}
obj0 = mds_obj(D = D, z = z0)
obj_up = mds_obj(D = D, z = z_cur)
return(list(z = z_cur, obj0 = obj0, obj_up = obj_up,
F0 = F0, Finit = Finit, Fup = Fz_cur))
}
tmp3 <- gd_cmds(nit = 30, D = as.matrix(dist1), z0 = zmds1, y=y1, lambda = 0.05, eta = 5e-04)
tmp3
dd
sink("gd_cmds_iter_30_lamb_5e-2_eta_5e-4.txt")
print(tmp3)
sink()
plot(tmp3$z, col = y1,
main = paste("F0=", round(tmp3$F0, 4), ", F_up=", round(tmp3$Fup, 4),
"Finit=", round(tmp3$Finit, 4)))
# MDS + F terms
gd_cmds <- function(nit = 1000, eta = 1e-04, conv_crit = 5e-03, lambda = 0.05,
z0, D, S = 2, y){
# fixed step size (eta)
N = dim(D)[1]
a <- length(table(y))
z_cur <- z0 #matrix, N * S
Fz_cur <- pseudo_F(mat = z_cur, trt = y)$pseudoF
F0 <- pseudo_F(d = D, trt = y)$pseudoF
Finit <- Fz_cur
obj_total = mds_obj(D = D, z = z_cur) + lambda*abs(F0 - Fz_cur)
for(t in 1:nit){
obj_total_prev <- obj_total
print(paste('iteration', t,
'  total', sprintf(obj_total, fmt = '%#.3f'),
'  Fz', sprintf(Fz_cur, fmt = '%#.3f')))
for(i in 1:N){
d_f <- rep(0, S)
tmp11 <- tmp22 <- rep(0, S)
tmp12 <- tmp21 <- 0
for(j in 1:N){
if(j != i) {
d_f <- d_f + 2 * (1 - D[i,j]/sqrt(sum((z_cur[i,] - z_cur[j,])^2))) *
(z_cur[i,] - z_cur[j,])
}
tmp11 <- tmp11 + z_cur[i,] - z_cur[j,]
tmp22 <- tmp22 + as.numeric(ifelse(y[i] == y[j], z_cur[i,] - z_cur[j,], rep(0, S)))
for(i_ in 1:N){
tmp21 <- tmp21 + sum((z_cur[i_,] - z_cur[j,])^2)
tmp12 <- tmp12 + ifelse(y[i_] == y[j],
sum((z_cur[i_,] - z_cur[j,])^2), 0)
}
}
tmp3 <- tmp12^(-2)
d_g <- 4 * (N-a)/a * sign(Fz_cur - F0) * (tmp11 * tmp12 - tmp21 * tmp22) * tmp3
z_cur[i,] <- z_cur[i,] - eta * (d_f + lambda * d_g)
Fz_cur <- pseudo_F(mat = z_cur, trt = y)$pseudoF
}
obj_total = mds_obj(D = D, z = z_cur) + lambda*abs(F0 - Fz_cur)
if(abs(obj_total - obj_total_prev) < conv_crit * obj_total){
print("Converged")
break
}
}
obj0 = mds_obj(D = D, z = z0)
obj_up = mds_obj(D = D, z = z_cur)
return(list(z = z_cur, obj0 = obj0, obj_up = obj_up,
F0 = F0, Finit = Finit, Fup = Fz_cur))
}
tmp4 <- gd_cmds(D = as.matrix(dist1), z0 = zmds1, y=y1, lambda = 0.05, eta = 1e-03)
sink("gd_cmds_iter_inf_lamb_5e-2_eta_1e-3.txt")
print(tmp4)
sink()
~/Google Drive/My Drive/Dimension reduction study/2022-11 iss5/results
wd <- '~/Google Drive/My Drive/Dimension reduction study/2022-11 iss5/results'
sink(paste(wd, "gd_cmds_iter_inf_lamb_5e-2_eta_1e-3.txt", sep='/'))
print(tmp4)
sink()
png(filename=paste(wd, "gd_cmds_iter_inf_lamb_5e-2_eta_1e-3.png", sep='/'))
plot(tmp3$z, col = y1,
main = paste("F0=", round(tmp3$F0, 4), ", F_up=", round(tmp3$Fup, 4),
"Finit=", round(tmp3$Finit, 4)))
dev.off()
png(filename=paste(wd, "gd_cmds_iter_inf_lamb_5e-2_eta_1e-3.png", sep='/'), res=300)
plot(tmp3$z, col = y1,
main = paste("F0=", round(tmp4$F0, 4),
", F_up=", round(tmp4$Fup, 4),
"Finit=", round(tmp4$Finit, 4)))
png(filename=paste(wd, "gd_cmds_iter_inf_lamb_5e-2_eta_1e-3.png", sep='/'),
width = 700, height = 700, res=300)
plot(tmp3$z, col = y1,
main = paste("F0=", round(tmp4$F0, 4),
", F_up=", round(tmp4$Fup, 4),
"Finit=", round(tmp4$Finit, 4)))
dev.off()
png(filename=paste(wd, "gd_cmds_iter_inf_lamb_5e-2_eta_1e-3.png", sep='/'))
plot(tmp3$z, col = y1,
main = paste("F0=", round(tmp4$F0, 4),
", F_up=", round(tmp4$Fup, 4),
"Finit=", round(tmp4$Finit, 4)))
dev.off()
tmp3
tmp4
tmp3$z - tmp4$z
tmp <- gd_cmds(D = as.matrix(dist2), z0 = zmds2, y=y2, lambda = 0.05, eta = 1e-03)
tmp
tmp <- gd_cmds(nit = 1, D = as.matrix(dist2), z0 = zmds2, y=y2, lambda = 0.05, eta = 1e-03)
tmp
source("get_dist.R")
ordu1 = ordinate(site1, "PCoA", distance = "unifrac", weighted=TRUE)
ordu2 = ordinate(site2, "PCoA", distance = "unifrac", weighted=TRUE)
pseudo_F <- function(mat=NULL, trt, d = NULL){
if(is.null(d)){
d <- as.matrix(dist(mat))
} else {
d <- as.matrix(d)
}
N <- nrow(d)
a <- length(unique(trt))
n <- N/a
SST <- SSW <- 0
for(i in 1:(N-1)){
for(j in (i+1):N){
SST = SST + d[i,j]^2
SSW <- SSW + (trt[i] == trt[j]) * d[i,j]^2
}
}
SST <- SST / N
SSW <- SSW / n
SSA <- SST - SSW
return(list(SST = SST, SSW = SSW, SSA = SSA,
pseudoF = (SSA * (N-a))/(SSW * (a-1))))
}
pseudo_F(ordu1$vectors[,1:2], site1@sam_data@.Data[[1]])
pseudo_F(ordu2$vectors[,1:2], site2@sam_data@.Data[[1]])
ps_filter1@sam_data
pseudo_F(ordu1$vectors[,1:2], ps_filter1@sam_data@.Data[[1]])
pseudo_F(ordu1$vectors[,1:2], ps_filter2@sam_data@.Data[[1]])
ps_filter2@sam_data
pseudo_F(ordu2$vectors[,1:2], ps_filter2@sam_data@.Data[[1]])
pseudo_F(ordu2$vectors[,1:10], site2@sam_data@.Data[[1]])
pseudo_F(ordu2$vectors[,1:50], site2@sam_data@.Data[[1]])
ordu1
pseudo_F(ordu2$vectors[,1:20], site2@sam_data@.Data[[1]])
pseudo_F(ordu2$vectors[,1:15], site2@sam_data@.Data[[1]])
pseudo_F(ordu1$vectors[,1:15], site1@sam_data@.Data[[1]])
tmp
tmp3
pseudo_F(ordu1$vectors[,1:2], site1@sam_data@.Data[[1]])
pseudo_F(ordu2$vectors[,1:2], site2@sam_data@.Data[[1]])
site2@sam_data@.Data[[1]]
y1
Fz_cur <- pseudo_F(mat = zmds2, trt = y2)$pseudoF
pseudo_F(mat = zmds2, trt = y2)$pseudoF
pseudo_F(d = as.matrix(dist2), trt = y)$pseudoF
pseudo_F(d = as.matrix(dist2), trt = y2)$pseudoF
pseudo_F(ordu2$vectors[,1:2], trt = y2)$pseudoF
pseudo_F(ordu2$vectors[,1:15], trt = y2)$pseudoF
for (j in c("1","2")){
physeq_temp = subset_samples(ps, Site==j) # subset
bray = phyloseq::distance(physeq_temp, method = "unifrac")
sampledf = data.frame(sample_data(physeq_temp))
## 1) Adonis test
ado = adonis(bray ~ Treatment, data = sampledf, strata=sampledf$Replicate)
cat("\n$$$$$ Site ", j, " $$$$$")
print(ado)
}
bray
bray2 = phyloseq::distance(physeq_temp, method = "wunifrac")
for (j in c("1","2")){
physeq_temp = subset_samples(ps, Site==j) # subset
bray = phyloseq::distance(physeq_temp, method = "wunifrac")
sampledf = data.frame(sample_data(physeq_temp))
## 1) Adonis test
ado = adonis(bray ~ Treatment, data = sampledf, strata=sampledf$Replicate)
cat("\n$$$$$ Site ", j, " $$$$$")
print(ado)
## 2) Homogeneity of dispersion test
# beta <- betadisper(bray, sampledf$Treatment)
# print(permutest(beta))
}
pseudo_F(ordu1$vectors[,1:2], site1@sam_data@.Data[[1]])
pseudo_F(ordu2$vectors[,1:2], site2@sam_data@.Data[[1]])
ordu1_unweighted = ordinate(site1, "PCoA", distance = "unifrac", weighted=FALSE)
ordu2_unweighted = ordinate(site2, "PCoA", distance = "unifrac", weighted=FALSE)
pseudo_F(ordu1_unweighted$vectors[,1:2], site1@sam_data@.Data[[1]])
pseudo_F(ordu2_unweighted$vectors[,1:2], site2@sam_data@.Data[[1]])
pseudo_F(ordu2_unweighted$vectors[,1:15], site2@sam_data@.Data[[1]])
pseudo_F(ordu1_unweighted$vectors[,1:15], site1@sam_data@.Data[[1]])
pseudo_F(ordu1$vectors[,1:15], site1@sam_data@.Data[[1]])
pseudo_F(d = as.matrix(dist1), trt = site1@sam_data@.Data[[1]])$pseudoF
pseudo_F(d = as.matrix(dist2), trt = site2@sam_data@.Data[[1]])$pseudoF
dist1_unweighted = phyloseq::distance(site1, method = "unifrac", weighted = F)
dist2_unweighted = phyloseq::distance(site2, method = "unifrac", weighted = F)
pseudo_F(d = as.matrix(dist1_unweighted), trt = site1@sam_data@.Data[[1]])$pseudoF
pseudo_F(d = as.matrix(dist2_unweighted), trt = site2@sam_data@.Data[[1]])$pseudoF
y1
rm ps_filter1
rm(ps_filter_1)
rm(ps_filter1)
rm(ps_filter2)
rm(tmp4)
rm(ordu1_unweighted)
rm(ordu2_unweighted)
ps1 = subset_samples(ps, Site=="1")
ps2 = subset_samples(ps, Site=="2")
dist1 = phyloseq::distance(ps1, method = "unifrac", weighted = T)
dist2 = phyloseq::distance(ps2, method = "unifrac", weighted = T)
dist1
as.matrix(dist1)
as.matrix(dist1).size()
size(as.matrix(dist1))
dim(as.matrix(dist1))
ps1@sam_data@.Data[[1]]
y1
sample(1:36, 18, replace=F)
1:3
1:3 & 1
1:3 & 4
1:3 == 4
1:3 == 3
1:3 == 2:5
rep(1,2)
random_index <- sample(1:36, 18, replace=F)
y <- rep(1,36)
y[random_index] = 2
y
pseudo_F(mat = ordu1$vectors[,1:2], trt = y)$pseudoF
random_index <- sample(1:36, 18, replace=F)
y <- rep(1,36)
y[random_index] = 2
pseudo_F(mat = ordu1$vectors[,1:2], trt = y)$pseudoF
pseudo_F(mat = distmat1, trt = y)$pseudoF
pseudo_F(mat = ordu1$vectors[,1:2], trt = y)$pseudoF
pseudo_F(mat = ordu2$vectors[,1:2], trt = y)$pseudoF
pseudo_F(mat = distmat2, trt = y)$pseudoF
zeros(2,2)
matrix(0, nrow=2, ncol=4)
xx = matrix(0, nrow=2, ncol=4)
xx[1]
xx[2]
xx[2,:]
xx[2,]
f_mat = matrix(0, nrow=100, ncol=4)
f_mat[,[1,2]]
f_mat[,c(1,2)]
# iterate
f_mat = matrix(0, nrow=100, ncol=4)
for (iter in 1:100){
random_index <- sample(1:36, 18, replace=F)
y <- rep(1,36)
y[random_index] = 2  # crate random labels for ps dataset
f_mat[iter,1] = pseudo_F(mat = distmat1, trt = y)$pseudoF
f_mat[iter,2] = pseudo_F(mat = ordu1$vectors[,1:2], trt = y)$pseudoF
f_mat[iter,3] = pseudo_F(mat = distmat2, trt = y)$pseudoF
f_mat[iter,4] = pseudo_F(mat = ordu2$vectors[,1:2], trt = y)$pseudoF
}
par(mfrow = c(1,2))
plot(f_mat[,c(1,2)], main = "Site 1")
plot(f_mat[,c(3,4)], main = "Site 2")
par(mfrow = c(1,2))
plot(f_mat[,c(1,2)], main = "Site 1", 'xlab' = 'Original', 'ylab'='2D')
plot(f_mat[,c(3,4)], main = "Site 2", 'xlab' = 'Original', 'ylab'='2D')
f_mat = matrix(0, nrow=100, ncol=4)
for (iter in 1:1000){
random_index <- sample(1:36, 18, replace=F)
y <- rep(1,36)
y[random_index] = 2  # crate random labels for ps dataset
f_mat[iter,1] = pseudo_F(mat = distmat1, trt = y)$pseudoF
f_mat[iter,2] = pseudo_F(mat = ordu1$vectors[,1:2], trt = y)$pseudoF
f_mat[iter,3] = pseudo_F(mat = distmat2, trt = y)$pseudoF
f_mat[iter,4] = pseudo_F(mat = ordu2$vectors[,1:2], trt = y)$pseudoF
}
f_mat = matrix(0, nrow=1000, ncol=4)
for (iter in 1:1000){
random_index <- sample(1:36, 18, replace=F)
y <- rep(1,36)
y[random_index] = 2  # crate random labels for ps dataset
f_mat[iter,1] = pseudo_F(mat = distmat1, trt = y)$pseudoF
f_mat[iter,2] = pseudo_F(mat = ordu1$vectors[,1:2], trt = y)$pseudoF
f_mat[iter,3] = pseudo_F(mat = distmat2, trt = y)$pseudoF
f_mat[iter,4] = pseudo_F(mat = ordu2$vectors[,1:2], trt = y)$pseudoF
}
# plot
par(mfrow = c(1,2))
plot(f_mat[,c(1,2)], main = "Site 1", 'xlab' = 'Original', 'ylab'='2D')
plot(f_mat[,c(3,4)], main = "Site 2", 'xlab' = 'Original', 'ylab'='2D')
