help(cmdscale)
view(cmdscale)
View(cmdscale)
0.0644/1.5
setwd("~/Documents/GitHub/mds-hypothesis-testing/prelim")
## Created and last run 2/13/22 by Hyu Kim (hskimm@mit.edu)
library("phyloseq")
library("ggplot2")
library("ape")
library("vegan")
# path = "/Users/hk/desktop/mit/doctoral/idps/2021-08" # write your current directory here
ps = readRDS("community_phyloseq.Rds")
setwd("~/Documents/GitHub/mds-hypothesis-testing/data")
## Created and last run 2/13/22 by Hyu Kim (hskimm@mit.edu)
library("phyloseq")
library("ggplot2")
library("ape")
library("vegan")
# path = "/Users/hk/desktop/mit/doctoral/idps/2021-08" # write your current directory here
ps = readRDS("community_phyloseq.Rds")
for (j in c("1","2")){
physeq_temp = subset_samples(ps, Site==j) # subset
bray = phyloseq::distance(physeq_temp, method = "unifrac")
sampledf = data.frame(sample_data(physeq_temp))
## 1) Adonis test (compare centroids between each group)
ado = adonis(bray ~ Treatment, data = sampledf, strata=sampledf$Replicate)
cat("\n$$$$$ Site ", j, " $$$$$")
print(ado)
## 2) Homogeneity of dispersion test (compare dispersion of the groups)
beta <- betadisper(bray, sampledf$Treatment)
print(permutest(beta))
}
for (j in c("1","2")){
physeq_temp = subset_samples(ps, Site==j) # subset
bray = phyloseq::distance(physeq_temp, method = "wunifrac")
sampledf = data.frame(sample_data(physeq_temp))
## 1) Adonis test (compare centroids between each group)
ado = adonis(bray ~ Treatment, data = sampledf, strata=sampledf$Replicate)
cat("\n$$$$$ Site ", j, " $$$$$")
print(ado)
## 2) Homogeneity of dispersion test (compare dispersion of the groups)
beta <- betadisper(bray, sampledf$Treatment)
print(permutest(beta))
}
pf(q=1.925, df1=1, df2=34, lower.tail = FALSE)
pf(q=7.402, df1=1, df2=34, lower.tail = FALSE)
# Randomly assigns a binary label to a given phyloseq dataset theb calculates
# pseudo-F under original and MDS ordination respectively, which is repeated
# for a number of times
library("phyloseq")
source("permanova_with_config.R")
ps = readRDS("community_phyloseq.Rds")
ps1 = subset_samples(ps, Site=="1")
ps2 = subset_samples(ps, Site=="2")
dist1 = phyloseq::distance(ps1, method = "unifrac", weighted = T)
dist2 = phyloseq::distance(ps2, method = "unifrac", weighted = T)
distmat1 = as.matrix(dist1)
distmat2 = as.matrix(dist2)
ordu1 = ordinate(ps1, "PCoA", distance = "unifrac", weighted=TRUE)
ordu2 = ordinate(ps2, "PCoA", distance = "unifrac", weighted=TRUE)
# iterate
f_mat = matrix(0, nrow=1000, ncol=8)
for (iter in 1:1000){
random_index <- sample(1:36, 18, replace=F)
y <- rep(1,36)
y[random_index] = 2  # crate random labels for ps dataset
f_mat[iter,1] = pseudo_F(mat = distmat1, trt = y)$pseudoF
f_mat[iter,2] = pseudo_F(mat = ordu1$vectors[,1:2], trt = y)$pseudoF
f_mat[iter,3] = pseudo_F(mat = distmat2, trt = y)$pseudoF
f_mat[iter,4] = pseudo_F(mat = ordu2$vectors[,1:2], trt = y)$pseudoF
}
# plot
par(mfrow = c(1,2))
plot(f_mat[,c(1,2)], main = "Site 1", 'xlab' = 'Original', 'ylab'='2D')
plot(f_mat[,c(3,4)], main = "Site 2", 'xlab' = 'Original', 'ylab'='2D')
sort(f_mat[,1], decreasing=TRUE)
for (c in 1:4){
f_sorted = sort(f_mat[,c], decreasing = TRUE)
for (iter in 1:1000){
f_mat[iter, c+4] = which(f_mat[iter, c] == f_sorted)
}
}
f_mat[,5:8]
-log10(f_mat[,5:8]/1000)
par(mfrow = c(1,2))
plot(-log10(f_mat[,c(5,6)]), main = "Site 1", 'xlab' = 'Original', 'ylab'='2D')
plot(-log10(f_mat[,c(7,8)]), main = "Site 2", 'xlab' = 'Original', 'ylab'='2D')
par(mfrow = c(1,2))
plot(log10(f_mat[,c(5,6)]), main = "Site 1", 'xlab' = 'Original', 'ylab'='2D')
plot(log10(f_mat[,c(7,8)]), main = "Site 2", 'xlab' = 'Original', 'ylab'='2D')
par(mfrow = c(1,2))
plot(-log10(f_mat[,c(5,6)]/1000), main = "Site 1", 'xlab' = 'Original', 'ylab'='2D')
plot(-log10(f_mat[,c(7,8)]/1000), main = "Site 2", 'xlab' = 'Original', 'ylab'='2D')
(f_mat[,5]>2)|(f_mat[,6]>2)|(f_mat[,7]>2)|(f_mat[,8]>2)
f_mat[,5]>2
f_mat[,5]
-log10(f_mat[,5:8]/1000)
f_mat[,5:8] <- -log10(f_mat[,5:8]/1000)
f_mat[,5:8]
(f_mat[,5]>2)|(f_mat[,6]>2)|(f_mat[,7]>2)|(f_mat[,8]>2)
which(1:5==1)
which(1:5==1) + which(1:5==2)
c(which(1:5==1)) + which(1:5==2)
c(which(1:5==1)) + c(which(1:5==2))
append(which(1:5==1),which(1:5==2)))
append(which(1:5==1),which(1:5==2))
p_ratio <- f_mat_sub[,5]/f_mat_sub[,6]
case_logi <- (f_mat[,5]>2)|(f_mat[,6]>2)|(f_mat[,7]>2)|(f_mat[,8]>2)
f_mat_sub <- f_mat[case_logi]
p_ratio <- f_mat_sub[,5]/f_mat_sub[,6]
f_mat_sub
f_mat_sub <- f_mat[case_logi,]
p_ratio <- f_mat_sub[,5]/f_mat_sub[,6]
which(p_ratio==max(p_ratio) | p_ratio==min(p_ratio))
extremes <- matrix(0, nrow=2, ncol=2)
extremes <- matrix(0, nrow=2, ncol=2)
for (c in 1:2){
p_ratio <- f_mat_sub[,c+4]/f_mat_sub[,c+5]
extremes[,c] <- which(p_ratio==max(p_ratio) | p_ratio==min(p_ratio))
}
extremes
rownames(extremes) <- c('max', 'min')
colnames(extremes) <- c('Site 1', 'Site 2')
extremes
y_crit_11 <- y_crit_12 <- y_crit_21 <- y_crit_22 <- rep(1,36)
y_crit_11[random_index_set[extremes[1,1]]] <- 2
# iterate
f_mat = matrix(0, nrow=1000, ncol=8)
random_index_set <- matrix(0, nrow=1000, ncol=18)
for (iter in 1:1000){
random_index <- sample(1:36, 18, replace=F)
random_index_set[iter,] <- random_index
y <- rep(1,36)
y[random_index] = 2  # crate random labels for ps dataset
f_mat[iter,1] = pseudo_F(mat = distmat1, trt = y)$pseudoF
f_mat[iter,2] = pseudo_F(mat = ordu1$vectors[,1:2], trt = y)$pseudoF
f_mat[iter,3] = pseudo_F(mat = distmat2, trt = y)$pseudoF
f_mat[iter,4] = pseudo_F(mat = ordu2$vectors[,1:2], trt = y)$pseudoF
}
for (c in 1:4){
f_sorted = sort(f_mat[,c], decreasing = TRUE)
for (iter in 1:1000){
f_mat[iter, c+4] = which(f_mat[iter, c] == f_sorted)
}
}
f_mat[,5:8] <- -log10(f_mat[,5:8]/1000)
# pick abnormal cases
case_logi <- (f_mat[,5]>2)|(f_mat[,6]>2)|(f_mat[,7]>2)|(f_mat[,8]>2)
f_mat_sub <- f_mat[case_logi,]
extremes <- matrix(0, nrow=2, ncol=2)
rownames(extremes) <- c('max', 'min')
colnames(extremes) <- c('Site 1', 'Site 2')
for (c in 1:2){
p_ratio <- f_mat_sub[,c+4]/f_mat_sub[,c+5]
extremes[,c] <- which(p_ratio==max(p_ratio) | p_ratio==min(p_ratio))
}
y_crit_11 <- y_crit_12 <- y_crit_21 <- y_crit_22 <- rep(1,36)
y_crit_11[random_index_set[extremes[1,1]]] <- 2
y_crit_12[random_index_set[extremes[1,2]]] <- 2
y_crit_21[random_index_set[extremes[2,1]]] <- 2
y_crit_22[random_index_set[extremes[2,2]]] <- 2
y_crit_11
random_index_set
random_index_set[extremes[1,1],]
y_crit_11[random_index_set[extremes[1,1],]] <- 2
y_crit_12[random_index_set[extremes[1,2],]] <- 2
y_crit_21[random_index_set[extremes[2,1],]] <- 2
y_crit_22[random_index_set[extremes[2,2],]] <- 2
y_crit_11
par(mfrow = c(1,2))
zmds1 <- plot_ordination(ps1, ordu1, axes = 1:10)$data[, 1:2]
plot(zmds1, col = y_crit_11, main = "F0=", f_mat[extremes[1,1],1])
plot(zmds1, col = y_crit_12, main = "F0=", f_mat[extremes[1,1],1])
par(mfrow = c(1,2))
zmds1 <- plot_ordination(ps1, ordu1, axes = 1:10)$data[, 1:2]
plot(zmds1, col = y_crit_11, main = paste("F0=", f_mat[extremes[1,1],1]))
plot(zmds1, col = y_crit_12, main = paste("F0=", f_mat[extremes[1,1],1]))
par(mfrow = c(1,2))
zmds1 <- plot_ordination(ps1, ordu1, axes = 1:10)$data[, 1:2]
plot(zmds1, col = y_crit_11, main = paste("F0=", f_mat[extremes[1,1],1]))
plot(zmds1, col = y_crit_12, main = paste("F0=", f_mat[extremes[1,2],1]))
par(mfrow = c(1,2))
zmds1 <- plot_ordination(ps1, ordu1, axes = 1:10)$data[, 1:2]
plot(zmds1, col = y_crit_11, main = paste("F0=", f_mat[extremes[1,1],1]))
plot(zmds1, col = y_crit_12, main = paste("F0=", f_mat[extremes[2,1],1]))
y_crit_11 <- y_crit_12 <- y_crit_21 <- y_crit_22 <- rep(1,36)
y_crit_11[random_index_set[extremes[1,1],]] <- 2
y_crit_12[random_index_set[extremes[2,1],]] <- 2
y_crit_21[random_index_set[extremes[1,2],]] <- 2
y_crit_22[random_index_set[extremes[2,2],]] <- 2
par(mfrow = c(1,2))
zmds1 <- plot_ordination(ps1, ordu1, axes = 1:10)$data[, 1:2]
plot(zmds1, col = y_crit_11, main = paste("F0=", f_mat[extremes[1,1],1]))
plot(zmds1, col = y_crit_12, main = paste("F0=", f_mat[extremes[2,1],1]))
par(mfrow = c(1,2))
zmds2 <- plot_ordination(ps1, ordu2, axes = 1:10)$data[, 1:2]
par(mfrow = c(1,2))
zmds2 <- plot_ordination(ps2, ordu2, axes = 1:10)$data[, 1:2]
plot(zmds1, col = y_crit_21, main = paste("F0=", f_mat[extremes[1,2],1]))
plot(zmds1, col = y_crit_22, main = paste("F0=", f_mat[extremes[2,2],1]))
par(mfrow = c(1,2))
zmds2 <- plot_ordination(ps2, ordu2, axes = 1:10)$data[, 1:2]
plot(zmds1, col = y_crit_21,
main = paste("F0=", round(f_mat[extremes[1,2],3], 3),
"F_mds=", round(f_mat[extremes[1,2],4], 3)))
plot(zmds1, col = y_crit_22,
main = paste("F0=", round(f_mat[extremes[2,2],3], 3),
"F_mds=", round(f_mat[extremes[2,2],4], 3)))
par(mfrow = c(1,2))
zmds2 <- plot_ordination(ps2, ordu2, axes = 1:10)$data[, 1:2]
plot(zmds1, col = y_crit_21,
main = paste("log_p0=", round(f_mat[extremes[1,2],7], 3),
"log_p_mds=", round(f_mat[extremes[1,2],8], 3)))
plot(zmds1, col = y_crit_22,
main = paste("log_p0=", round(f_mat[extremes[2,2],7], 3),
"log_p_mds=", round(f_mat[extremes[2,2],8], 3)))
